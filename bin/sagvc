#!/usr/bin/python3
SVER='2.0.3'
##############################################################################
# sagvc - Security Announcement Patterns Change Log Generator
# Copyright (C) 2023 SUSE LLC
#
# Description:  Creates a list of new security announcement pattern entry for
#               the change log
# Modified:     2023 Jun 19
#
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#  Authors/Contributors:
#     Jason Record <jason.record@suse.com>
#
##############################################################################

import sys
import os
import re
import getopt
import datetime
import subprocess as sp
import patdevel

def title():
	"Display the program title"
	print("#############################################################################")
	print("# Security Advisory Change Log Generator v" + str(SVER))
	print("#############################################################################\n")

def usage():
	"Displays usage information"
	print("Usage: sagvc [options] [Month][Year]")
	print()
	print("Options:")
	print("  -h           Display this help")
	print()

def convert_date(given_str):
	"Converts given string to valid date for URL retrival"
	converted_str = 'INVALID'
	today = datetime.datetime.today()
	MONTHS = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 
	7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec', 
	'jan': 'Jan', 'feb': 'Feb', 'mar': 'Mar', 'apr': 'Apr', 'may': 'May', 'jun': 'Jun', 
	'jul': 'Jul', 'aug': 'Aug', 'sep': 'Sep', 'oct': 'Oct', 'nov': 'Nov', 'dec': 'Dec'}
	this_year = today.strftime("%Y")
	this_month = int(today.strftime("%m"))
	use_year = ''
	use_month = ''
	if( len(given_str) > 0 ):
		if( '-' in given_str ):
			parts = given_str.split('-')
		elif( '/' in given_str ):
			parts = given_str.split('/')
		else:
			parts = [given_str, '0']

		#print(parts)
		for part in parts:
			if( part.isdigit() ):
				part = int(part)
				if( part > 0 ):
					if( part > 12 ): # Assume it's the requested year
						if( part > 99 ):
							use_year = str(part)
						else:
							use_year = "20" + str(part)
					else: # Assume it's the requested month
						if( part in MONTHS.keys() ):
							use_month = MONTHS[part]
						else:
							sys.exit(3)
			else:
				part = part[:3].lower()
				if( part in MONTHS.keys() ):
					use_month = MONTHS[part]
				else:
					sys.exit(3)
		if( len(use_year) == 0 ):
			use_year = this_year
		if( len(use_month) == 0 ):
			use_month = MONTHS[this_month]
		converted_str = str(use_month) + " " +str(use_year)
	else:
		if( this_month == 1 ):
			use_month = 12
			use_year = int(this_year) - 1
		else:
			use_month = this_month - 1
			use_year = this_year
		converted_str = str(MONTHS[use_month]) + " " + str(use_year)
	return converted_str


def main(argv):
	global SVER
	parse_patterns = []
	spec_ver = 0
	count = 0
	date_updated = ''
	SAID_WIDTH = 5

	try:
		(optlist, args) = getopt.gnu_getopt(argv[1:], "h")
	except getopt.GetoptError as exc:
		title()
		print("Error:", exc, file=sys.stderr)
		print("\n")
		usage()
		sys.exit(2)
	for opt in optlist:
		if opt[0] in {"-h"}:
			title()
			usage()
			sys.exit(0)
	if len(args) > 0:
		given_date = '-'.join(args)
	else:
		given_date = ''

	title()
	# Check if we are in a github directory for 
	cwd = os.getcwd()
	repo_name = os.path.basename(cwd)
	git_dir = cwd + "/.git"
	spec_file = cwd + '/spec/' + repo_name + ".spec"
	date_updated = convert_date(given_date)
	print("Processing package: {0}".format(repo_name))

	if not os.path.isdir(git_dir):
		print("Error: Not a GitHub directory")
		print("Change to an SCA Pattern GitHub repository directory and try again\n")
		sys.exit(1)
	elif not os.path.exists(spec_file):
		print("Error: File not found - " + spec_file)
		print("Change to an SCA Pattern GitHub repository directory and try again\n")
		sys.exit(1)

	parse_patterns = parse_patterns + pd.get_uncommitted_repo_list()
	parse_patterns = parse_patterns + pd.get_committed_repo_list()

	saids = []
	if( len(parse_patterns) > 0 ):
		spec_ver = get_spec_ver(spec_file)
		print()
		for this_pattern in parse_patterns:
			parts = this_pattern.split('_')
			said = ":".join([parts[-4], parts[-3]])
			saids.append(said)
		count = len(saids)
		print("- Changes in version " + str(spec_ver))
		print("  - New security announcement patterns as of " + date_updated + " (" + str(count) + "):")
		for x in range(0, len(saids), SAID_WIDTH):
			row = saids[x:x+SAID_WIDTH]
			print("    " + " ".join(row))
		print("\nNew security announcement patterns as of " + date_updated + " - " + str(count))
	else:
		print("Warning: No security patterns found for the change log\n")
	print()

# Entry point
if __name__ == "__main__":
	main(sys.argv)

